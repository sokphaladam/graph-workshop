extend type Query {
  productList(
    offset: Int = 0
    limit: Int = 25
    code: String
    filter: FilterProduct
    schedule: Boolean
    enabledOn: [String]
  ): [Product]
  product(id: Int!): Product
}

extend type Mutation {
  createProduct(data: ProductInput): Boolean
  updateProduct(id: Int!, data: ProductInput): Boolean
  updateStatusProduct(id: Int!, status: STATUS_PRODUCT!): Boolean
  checkProductCode(code: String!): Boolean
}

input ProductInput {
  code: String
  title: String
  description: String
  sku: [SKUInput]
  category: Int
  stockAlter: Float
  type: [TYPE_PRODUCT]
  images: String
  addons: [AddonInput]
  integrate: [IntegrateInput]
}

input AddonInput {
  id: Int
  name: String
  value: String
  isRequired: Boolean
}

input SKUInput {
  id: Int
  unit: String
  price: Float
  discount: Float
  name: String
  image: String
  status: STATUS_PRODUCT
}

input IntegrateInput {
  id: Int
  productId: Int
  integrateId: Int
  qty: String
}

type Product {
  id: Int
  code: String
  title: String
  description: String
  category: Category
  type: [TYPE_PRODUCT]
  images: String
  sku: [SKU]
  addons: [AddonProduct]
  integrates: [Integrate]
  stockAlter: Float
  status: STATUS_PRODUCT
}

type AddonProduct {
  id: Int
  name: String
  value: String
  isRequired: Boolean
}

type SKU {
  id: Int
  unit: String
  price: Float
  discount: Float
  name: String
  image: String
  status: STATUS_PRODUCT
  product: Product
  enabledOn: String
}

type Integrate {
  id: Int
  product: Product
  integrate: Product
  qty: String
}

input FilterProduct {
  category: [Int]
  type: [TYPE_PRODUCT] = [PRODUCTION]
  isLowStock: Boolean
  status: [STATUS_PRODUCT] = []
}

enum TYPE_PRODUCT {
  PRODUCTION
  RAW
  ADDON
  FREEZING
  SECOND_HAND
  FREE
}

enum STATUS_PRODUCT {
  AVAILABLE
  OUT_OF_STOCK
  TIME_OUT
  INACTIVE
}
